//problem :https://leetcode.com/problems/search-insert-position/submissions/871338907/

//Using binary Seactrh algorith (TC o(log n)) . Because it divide the whole array directly by 2 while searching .

//code

class Solution {
    public int searchInsert(int[] nums, int target) {

int low = 0 ;
int high = nums.length - 1;


        while(low<=high)
        {
          int mid = ( low + (high)  )  /2 ;
          if(nums[mid] ==target) { return mid ; }
        if (target <nums[mid]) { high = mid - 1 ;}
        else { low = mid+1 ;}      
        }
        return low ;

   
    }
}
