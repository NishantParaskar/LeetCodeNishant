Links:
Inoder (94. Binary Tree Inorder Traversal) : https://leetcode.com/problems/binary-tree-inorder-traversal/
Preoder (144. Binary Tree Preorder Traversal): https://leetcode.com/problems/binary-tree-preorder-traversal/description/
PostOrder (145. Binary Tree Postorder Traversal) : https://leetcode.com/problems/binary-tree-postorder-traversal/description/


//Code :
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
 List<Integer> ls = new ArrayList() ;
if(root == null)
{
    return ls ;
}
travel(root , ls) ;  // recursive call

return ls ;
}

// Separate function is created because it is not possible handle null condition  when root == null 
public static void travel(TreeNode root , List<Integer> ls )  
{
    if(root ==  null)
    {
        return ;
    }
    
    //Inorder
    travel(root.left , ls) ;
    ls.add(root.val) ;
    travel(root.right , ls) ;
    
    
    /*    //Pre - order
    ls.add(root.val) ;
    travel(root.left , ls) ;
    travel(root.right , ls) ;
    */
    
    
   /*  //Post - order
    travel(root.left , ls) ;
    travel(root.right , ls) ;
    ls.add(root.val) ;
    */




}


}
